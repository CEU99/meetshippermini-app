'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';

interface TestUser {
  fid: number;
  username: string;
  displayName: string;
  userCode: string;
  description: string;
}

const TEST_USERS: TestUser[] = [
  {
    fid: 1111,
    username: 'alice',
    displayName: 'Alice',
    userCode: '6287777951',
    description: 'Test user - Manual match sender',
  },
  {
    fid: 543581,
    username: 'cengizhaneu',
    displayName: 'Emir Cengizhan Ulu',
    userCode: '7189696562',
    description: 'Real user - Match target',
  },
];

export default function DevLoginPage() {
  const router = useRouter();
  const [currentSession, setCurrentSession] = useState<any>(null);
  const [loading, setLoading] = useState(false);
  const [checking, setChecking] = useState(true);

  // Check current session on mount
  useEffect(() => {
    checkSession();
  }, []);

  const checkSession = async () => {
    setChecking(true);
    try {
      const response = await fetch('/api/dev/session');
      const data = await response.json();
      if (data.authenticated) {
        setCurrentSession(data.session);
      } else {
        setCurrentSession(null);
      }
    } catch (_error) {
      console.error('Failed to check session:', error);
    } finally {
      setChecking(false);
    }
  };

  const loginAs = async (user: TestUser) => {
    setLoading(true);
    try {
      const response = await fetch(
        `/api/dev/login?fid=${user.fid}&username=${user.username}&displayName=${encodeURIComponent(user.displayName)}&userCode=${user.userCode}`
      );
      const data = await response.json();

      if (data.authenticated) {
        setCurrentSession(data.session);
        alert(`✅ Logged in as ${user.displayName} (@${user.username})`);
        // Optionally redirect to inbox
        // router.push('/mini/inbox');
      } else {
        alert(`❌ Login failed: ${data.error || 'Unknown error'}`);
      }
    } catch (_error) {
      alert(`❌ Login failed: ${error.message}`);
    } finally {
      setLoading(false);
    }
  };

  const logout = async () => {
    setLoading(true);
    try {
      await fetch('/api/dev/logout');
      setCurrentSession(null);
      alert('✅ Logged out successfully');
    } catch (_error) {
      alert(`❌ Logout failed: ${error.message}`);
    } finally {
      setLoading(false);
    }
  };

  if (checking) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-purple-600 mx-auto"></div>
          <p className="mt-4 text-gray-600">Checking session...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-3xl mx-auto">
        {/* Header */}
        <div className="text-center mb-8">
          <h1 className="text-3xl font-bold text-gray-900 mb-2">
            Dev Login Switcher
          </h1>
          <p className="text-gray-600">
            Quick login for testing without Farcaster OAuth
          </p>
          <div className="mt-4 inline-block bg-yellow-50 border border-yellow-200 rounded-lg px-4 py-2">
            <p className="text-sm text-yellow-800">
              ⚠️ Development only - disabled in production
            </p>
          </div>
        </div>

        {/* Current Session */}
        <div className="bg-white rounded-lg shadow-md p-6 mb-6">
          <h2 className="text-lg font-semibold text-gray-900 mb-4">
            Current Session
          </h2>
          {currentSession ? (
            <div className="space-y-2">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-gray-600">Logged in as:</p>
                  <p className="text-lg font-medium text-gray-900">
                    {currentSession.displayName} (@{currentSession.username})
                  </p>
                  <p className="text-sm text-gray-500">FID: {currentSession.fid}</p>
                  {currentSession.userCode && (
                    <p className="text-sm text-gray-500">
                      User Code: {currentSession.userCode}
                    </p>
                  )}
                </div>
                <div className="flex flex-col gap-2">
                  <button
                    onClick={() => router.push('/mini/inbox')}
                    className="px-4 py-2 bg-purple-600 text-white rounded-md hover:bg-purple-700 text-sm font-medium"
                  >
                    Go to Inbox
                  </button>
                  <button
                    onClick={logout}
                    disabled={loading}
                    className="px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 disabled:bg-gray-300 text-sm font-medium"
                  >
                    {loading ? 'Logging out...' : 'Logout'}
                  </button>
                </div>
              </div>
            </div>
          ) : (
            <div className="text-center py-4">
              <p className="text-gray-600">No active session</p>
              <p className="text-sm text-gray-500 mt-1">
                Select a test user below to login
              </p>
            </div>
          )}
        </div>

        {/* Test Users */}
        <div className="bg-white rounded-lg shadow-md p-6">
          <h2 className="text-lg font-semibold text-gray-900 mb-4">
            Test Users
          </h2>
          <div className="space-y-4">
            {TEST_USERS.map((user) => (
              <div
                key={user.fid}
                className="border border-gray-200 rounded-lg p-4 hover:border-purple-300 transition-colors"
              >
                <div className="flex items-start justify-between">
                  <div className="flex-1">
                    <h3 className="text-lg font-medium text-gray-900">
                      {user.displayName}
                    </h3>
                    <p className="text-sm text-gray-600">@{user.username}</p>
                    <p className="text-sm text-gray-500 mt-1">
                      FID: {user.fid} | User Code: {user.userCode}
                    </p>
                    <p className="text-xs text-gray-400 mt-2">
                      {user.description}
                    </p>
                  </div>
                  <button
                    onClick={() => loginAs(user)}
                    disabled={loading || currentSession?.fid === user.fid}
                    className={`px-4 py-2 rounded-md text-sm font-medium ${
                      currentSession?.fid === user.fid
                        ? 'bg-green-100 text-green-800 cursor-not-allowed'
                        : 'bg-purple-600 text-white hover:bg-purple-700 disabled:bg-gray-300'
                    }`}
                  >
                    {currentSession?.fid === user.fid
                      ? '✓ Current'
                      : loading
                      ? 'Logging in...'
                      : 'Login as'}
                  </button>
                </div>
              </div>
            ))}
          </div>
        </div>

        {/* Quick Links */}
        <div className="mt-6 bg-gray-100 rounded-lg p-4">
          <h3 className="text-sm font-semibold text-gray-700 mb-2">
            Quick Links
          </h3>
          <div className="space-y-1 text-sm">
            <div>
              <span className="text-gray-600">Session Status:</span>{' '}
              <a
                href="/api/dev/session"
                target="_blank"
                rel="noopener noreferrer"
                className="text-purple-600 hover:underline"
              >
                /api/dev/session
              </a>
            </div>
            <div>
              <span className="text-gray-600">Inbox:</span>{' '}
              <a
                href="/mini/inbox"
                className="text-purple-600 hover:underline"
              >
                /mini/inbox
              </a>
            </div>
            <div>
              <span className="text-gray-600">Create Match:</span>{' '}
              <a
                href="/mini/create"
                className="text-purple-600 hover:underline"
              >
                /mini/create
              </a>
            </div>
          </div>
        </div>

        {/* curl Examples */}
        <div className="mt-6 bg-gray-900 rounded-lg p-4 text-gray-100">
          <h3 className="text-sm font-semibold mb-2">curl Examples</h3>
          <div className="space-y-3 text-xs font-mono">
            <div>
              <p className="text-gray-400 mb-1"># Login as Alice:</p>
              <code className="text-green-400">
                curl &quot;http://localhost:3000/api/dev/login?fid=1111&username=alice&displayName=Alice&userCode=6287777951&quot;
              </code>
            </div>
            <div>
              <p className="text-gray-400 mb-1"># Check session:</p>
              <code className="text-green-400">
                curl http://localhost:3000/api/dev/session
              </code>
            </div>
            <div>
              <p className="text-gray-400 mb-1"># Logout:</p>
              <code className="text-green-400">
                curl http://localhost:3000/api/dev/logout
              </code>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
